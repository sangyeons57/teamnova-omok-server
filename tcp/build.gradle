/*
 * Gradle 빌드 스크립트 (Groovy DSL)
 * 이 파일은 Java TCP 서버 애플리케이션을 빌드합니다.
 */

// 1. 플러그인 설정
plugins {
    // 자바 애플리케이션을 빌드하고 실행하는 데 필요한 기본 기능을 제공합니다.
    id 'application'
}

// 2. 프로젝트 기본 정보
// group은 보통 회사의 도메인을 역순으로 사용합니다. (예: com.example)
group = 'site.bamsol'
// 버전은 GitHub Actions의 JAVA_JAR_NAME과 일치시켜야 합니다.
version = '1.0.0'

// 3. 자바 컴파일러 설정
java {
    // CI/CD 환경과 동일한 JDK 버전을 지정합니다.
    sourceCompatibility = JavaVersion.VERSION_17
}

// 4. 의존성 라이브러리를 다운로드할 원격 저장소
repositories {
    // 가장 대중적인 자바 라이브러리 저장소입니다.
    mavenCentral()
}

// 5. 프로젝트 의존성 설정
dependencies {
    // 이 곳에 필요한 라이브러리를 추가합니다.
    // 예: implementation 'com.google.code.gson:gson:2.10.1'

    // 로깅용 의존성
    implementation 'ch.qos.logback:logback-classic:1.5.13'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // 테스트 코드용 의존성
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

// 6. 애플리케이션 실행 및 JAR 파일 설정
application {
    // 애플리케이션의 시작점(main 메서드가 있는 클래스)을 지정합니다.
    // 소스 파일이 ./tcp/src/main/java/com/yourcompany/Main.java 라면
    // mainClass = 'com.yourcompany.Main' 으로 지정해야 합니다.
    // 패키지 없이 Main.java만 있다면 'Main'으로 지정합니다.
    mainClass = 'teamnova.omok.Main'
}

// 7. 최종 빌드 결과물(JAR) 이름 설정
jar {
    // JAR 파일의 기본 이름을 지정합니다.
    archiveBaseName = 'java-tcp-server'

    // 위에서 설정한 version 변수('1.0.0')가 자동으로 뒤에 붙습니다.
    // 최종 결과: java-tcp-server-1.0.0.jar
    // 이 이름이 GitHub Actions의 JAVA_JAR_NAME 환경 변수와 정확히 일치해야 합니다.
    manifest {
        attributes(
                'Main-Class': application.mainClass.get()
        )
    }
}

// (선택사항) 테스트 실행 설정
test {
    useJUnitPlatform()
}


