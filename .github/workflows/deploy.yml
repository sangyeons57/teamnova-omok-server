# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy to Production

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거(Trigger)' 설정입니다.
on:
  push:
    branches: 
        - main # 오직 'main' 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.

# 실행될 작업(Job)들을 정의합니다.
jobs: 
    # 'deploy' 라는 이름의 작업을 정의합니다. 
    deploy: 
        # 이 작업을 실행할 가상 머신의 종류를 지정합니다. 'ubuntu-latest'가 가장 일반적입니다.
        runs-on: ubuntu-latest

        env:
          APP_DIR: /home/sangyeons57/app
          JAR_NAME: teamnova-omok-server-tcp-1.0.0.jar

        # 실제 작업 단계(Step)들을 순서대로 나열합니다.
        steps:
            # 1단계: 코드 체크아웃
            - name: Checkout code
              uses: actions/checkout@v4

            # 2단계: JDK 17 설정 (Temurin) + Gradle 캐시
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin'
                java-version: '17'

            # 3단계: gradlew 실행권한 부여 (존재할 때만). 없더라도 실패하지 않음
            - name: Make gradlew executable if present
              run: chmod +x ./tcp/gradlew

            # 4단계: TCP 모듈 빌드 (Wrapper 사용)
            - name: Build tcp module
              run: ./tcp/gradlew build --no-daemon

            # 5단계: 기존 정적 파일 등은 계속 rsync 배포
            - name: Deploy files via rsync 
              uses: burnett01/rsync-deployments@6.0.0
              with: 
                switches: -avzr --delete
                path: ./
                remote_path: /home/sangyeons57/www/ # 실제 배포 경로
                remote_host: ${{ secrets.REMOTE_HOST }}
                remote_user: ${{ secrets.REMOTE_USER }}
                remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

            # 6단계: 빌드된 JAR만 별도로 서버 APP_DIR로 전송
            - name: Upload built JAR via rsync
              uses: burnett01/rsync-deployments@6.0.0
              with:
                switches: -avzr
                path: ./tcp/build/libs/${{ env.JAR_NAME }}
                remote_path: ${{ env.APP_DIR }}/
                remote_host: ${{ secrets.REMOTE_HOST }}
                remote_user: ${{ secrets.REMOTE_USER }}
                remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

            # 5단계: 빌드된 JAR 파일을 서버로 전송
            # scp-action을 사용하여 build/libs/ 폴더에 생성된 JAR 파일을 원격 서버로 복사합니다.
            - name: Copy JAR to server
              uses: appleboy/scp-action@v0.1.7
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                source: "build/libs/*.jar"  # 빌드 결과물이 있는 경로
                target: ${{ env.APP_DIR }} # 서버에 파일이 저장될 경로 (예: /home/sangyeons57/app)

            # 7단계: 서버에 접속하여 애플리케이션 재시작 및 배포 체크 파일 생성
            - name: Restart application and write deploy-check on server
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: |
                  set -e
                  mkdir -p ${{ env.APP_DIR }}
                  # 기존 프로세스 종료 (실행 중이 아니어도 에러 없이 진행)
                  pkill -f "${{ env.JAR_NAME }}" || echo "Application is not running"
                  
                  sleep 5
                  # 새 버전 실행 (로그 파일에 출력)
                  nohup java -jar ${{ env.APP_DIR }}/${{ env.JAR_NAME }} > ${{ env.APP_DIR }}/app.log 2>&1 &
                  # 배포 체크 파일 기록
                  echo "Deployment from commit ${{ github.sha }} successful at $(date)" > /home/deployer/deploy-check.txt