# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy to Production

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거(Trigger)' 설정입니다.
on:
  push:
    branches: 
        - main # 오직 'main' 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.

# 실행될 작업(Job)들을 정의합니다.
jobs: 
    # 'deploy' 라는 이름의 작업을 정의합니다. 
    deploy: 
        # 이 작업을 실행할 가상 머신의 종류를 지정합니다. 'ubuntu-latest'가 가장 일반적입니다.
        runs-on: ubuntu-latest

        env:
          # 서버 경로 설정
          ROOT: /home/sangyeons57/www
          HTML_DIR: /home/sangyeons57/www/html

          # 빌드 관련 설정
          JAR_NAME: teamnova-omok-server-tcp-1.0.0.jar
          JAR_LOCAL_PATH: ./tcp/build/libs/teamnova-omok-server-tcp-1.0.0.jar
          JAR_PATH: /home/sangyeons57/www/teamnova-omok-server-tcp-1.0.0.jar

        # 실제 작업 단계(Step)들을 순서대로 나열합니다.
        steps:
            # 1단계: 코드 체크아웃
            - name: Checkout code
              uses: actions/checkout@v4

            # 2단계: JDK 17 설정 (Temurin) + Gradle 캐시
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin'
                java-version: '17'
                cache: 'gradle'

            - name: Make gradlew executable if present
              run: chmod +x ./tcp/gradlew

            - name: Build tcp module with Gradle Wrapper
              working-directory: ./tcp
              run: ./gradlew clean build --no-daemon

            # HTML 디렉터리 정리
            - name: Clean HTML directory on server
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: rm -rf ${{ env.HTML_DIR }}/*

            - name: Deploy HTML via SCP (html -> HTML_DIR)
              uses: appleboy/scp-action@v0.1.7
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                source: "./html/*"
                target: ${{ env.HTML_DIR }}/

            - name: Upload JAR via SCP (tcp/build/libs -> ROOT)
              uses: appleboy/scp-action@v0.1.7
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                source: "${{ env.JAR_LOCAL_PATH }}"
                target: ${{ env.JAR_PATH }}


            # 7단계: 서버에 접속하여 애플리케이션 재시작 및 배포 체크 파일 생성
            - name: Restart application and write deploy-check on server
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: |
                  # 기존 프로세스 종료
                  echo "Stopping existing application..."
                  pkill -f "${{ env.JAR_NAME }}" || echo "No existing application found"

                  sleep 5

                  # JAR 파일 존재 및 권한 확인
                  echo "Checking JAR file..."
                  if [ -f "${{ env.JAR_PATH }}" ]; then
                    echo "✅ JAR file exists: ${{ env.JAR_PATH }}"
                    ls -la "${{ env.JAR_PATH }}"
                  else
                    echo "❌ JAR file not found: ${{ env.JAR_PATH }}"
                    echo "Files in target directory:"
                    ls -la ${{ env.ROOT }}/
                    exit 1
                  fi

                  # Java 환경 확인
                  echo "Checking Java environment..."
                  java -version 2>&1 || echo "❌ Java not found in PATH"

                  # 새 버전 실행
                  echo "Starting new application..."
                  nohup java -jar ${{ env.JAR_PATH }} > ${{ env.ROOT }}/app.log 2>&1 &
                  echo "Application started with PID: $!"

                  sleep 3

                  # 즉시 로그 확인 (에러 진단용)
                  echo "Application log (first 20 lines):"
                  head -20 ${{ env.ROOT }}/app.log 2>/dev/null || echo "No log file yet"

                  # 실행 확인
                  if pgrep -f "${{ env.JAR_NAME }}"; then
                    echo "✅ Application is running successfully"
                  else
                    echo "❌ Application failed to start"
                    echo "Full application log:"
                    cat ${{ env.ROOT }}/app.log 2>/dev/null || echo "No log file"
                    exit 1
                  fi
                  

            - name: Create deployment check file
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: |
                  echo "Deployment from commit ${{ github.sha }} successful at $(date)" > /home/deployer/deploy-check.txt