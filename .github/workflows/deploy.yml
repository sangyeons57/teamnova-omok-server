# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy to Production

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거(Trigger)' 설정입니다.
on:
  push:
    branches: 
        - main # 오직 'main' 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.

# 실행될 작업(Job)들을 정의합니다.
jobs: 
    # 'deploy' 라는 이름의 작업을 정의합니다. 
    deploy: 
        # 이 작업을 실행할 가상 머신의 종류를 지정합니다. 'ubuntu-latest'가 가장 일반적입니다.
        runs-on: ubuntu-latest

        # 실제 작업 단계(Step)들을 순서대로 나열합니다.
        steps:
            # 1단계: 코드 체크아웃
            # GitHub 저장소에 있는 코드를 가상 머신으로 내려받는(Checkout) 표준 액션입니다.
            # 이게 있어야 우리가 push한 최신 코드를 기반으로 작업을 수행할 수 있습니다.
            - name: Checkout code
              uses: actions/checkout@v4

            # 2단계: 서버에 접속하여 테스트 파일 생성
            # 이 부분이 우리가 설정한 SSH 인증을 사용하는 핵심입니다.
            - name: Deploy to Server
              uses: appleboy/ssh-action@v1.0.3
              with: 
                # 서버 주소. 우리가 GitHub Secrets에 저장한 값을 가져옵니다.
                host: ${{ secrets.REMOTE_HOST }}
                # 접속할 사용자 이름. 역시 Secrets에서 가져옵니다.
                username: ${{ secrets.REMOTE_USER }}
                # 접속에 사용할 개인키. Secrets에 저장된 키를 사용합니다.
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                # 서버에 접속해서 실행할 스크립트(명령어)입니다.
                script: | 
                    # deployer 사용자의 홈 디렉터리로 이동합니다.
                    cd /home/deployer
                    # 현재 날짜와 시간을 'deploy-check.txt' 파일에 기록합니다.
                    # 파일이 이미 있다면 덮어씁니다.
                    echo "Deployment successful at $(date)" > deploy-check.txt
                    # 현재 위치의 파일 목록을 출력하여 Actions 로그에서 확인할 수 있게 합니다.
                    ls -l