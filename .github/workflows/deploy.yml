# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy to Production

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거(Trigger)' 설정입니다.
on:
  push:
    branches: 
        - main # 오직 'main' 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.

# 실행될 작업(Job)들을 정의합니다.
jobs: 
    # 'deploy' 라는 이름의 작업을 정의합니다. 
    deploy: 
        # 이 작업을 실행할 가상 머신의 종류를 지정합니다. 'ubuntu-latest'가 가장 일반적입니다.
        runs-on: ubuntu-latest

        # 실제 작업 단계(Step)들을 순서대로 나열합니다.
        steps:
            # 1단계: 코드 체크아웃
            # GitHub 저장소에 있는 코드를 가상 머신으로 내려받는(Checkout) 표준 액션입니다.
            # 이게 있어야 우리가 push한 최신 코드를 기반으로 작업을 수행할 수 있습니다.
            - name: Checkout code
              uses: actions/checkout@v4


            # 2단계: rsync를 사용하여 파일 서버에 배포 (실제 파일들 전송)
            - name: Deploy files via rsync 
              uses: burnett01/rsync-deployments@6.0.0
              with: 
                switches: -avzr --delete
                path: ./
                remote_path: /home/sangyeons57/www/ # 실제 배포 경로
                remote_host: ${{ secrets.REMOTE_HOST }}
                remote_user: ${{ secrets.REMOTE_USER }}
                remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

            # 3단계: 서버에 접속하여 배포 완료 기록 남기기 (사용자께서 원하신 부분)
            # 바로 이 부분입니다! rsync 작업 아래에 별도의 step으로 추가합니다.
            - name: Create deployment check file
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ secrets.REMOTE_HOST }}
                username: ${{ secrets.REMOTE_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: |
                    # 어떤 버전(커밋)이 배포되었는지 함께 기록하면 나중에 추적하기 훨씬 좋습니다.
                    echo "Deployment from commit ${{ github.sha }} successful at $(date)" > /var/www/html/deploy-check.txt